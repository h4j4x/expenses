plugins {
    id "io.quarkus" version "${quarkusVersion}"
    id "jacoco"
}

dependencies {
    annotationProcessor "io.quarkus:quarkus-panache-common"

    implementation project(':common')
    implementation enforcedPlatform("io.quarkus.platform:quarkus-bom:${quarkusVersion}")
    implementation "io.quarkus:quarkus-arc"
    implementation "io.quarkus:quarkus-hibernate-reactive-panache"
    implementation "io.quarkus:quarkus-hibernate-validator"
    implementation "io.quarkus:quarkus-resteasy-reactive"
    implementation "io.quarkus:quarkus-resteasy-reactive-jackson"
    implementation "io.quarkus:quarkus-smallrye-graphql"
    implementation "io.quarkus:quarkus-smallrye-jwt"
    implementation "io.quarkus:quarkus-smallrye-jwt-build"
    implementation "io.quarkus:quarkus-smallrye-reactive-messaging"

    runtimeOnly "io.quarkus:quarkus-reactive-pg-client"
    runtimeOnly "io.quarkus:quarkus-smallrye-reactive-messaging-kafka"

    testImplementation "com.github.javafaker:javafaker:${javaFakerVersion}"
    // testImplementation "io.quarkus:quarkus-jacoco"
    testImplementation "io.quarkus:quarkus-junit5"
    testImplementation "io.quarkus:quarkus-junit5-mockito"
    testImplementation "io.quarkus:quarkus-smallrye-graphql-client"
    testImplementation "io.rest-assured:rest-assured"
}

test {
    finalizedBy jacocoTestReport
    jacoco {
        excludeClassLoaders = ["*QuarkusClassLoader"]
        destinationFile = layout.buildDirectory.file("jacoco-quarkus.exec").get().asFile
    }
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
    useJUnitPlatform()
}

jacocoTestReport {
    dependsOn test
    // enabled = false
    reports {
        xml.required = false
        csv.required = false
    }
}
